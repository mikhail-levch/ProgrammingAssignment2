5 + 6
factorial(10)
b <- 11
5 -> a
a + b
A <- 55
a + A
moe_lubimoe_chislo <- 15
factanal(A)
factorial(A)
y <- c(3,-2,5,6,NA,9)
y + 2
0/0
1/0
z <- 100%200
z <- 100:200
я
z
source('~/Downloads/install_all.R.txt', encoding = 'UTF-8')
x <- c(23,15,46,NA)
z <- c(5,6,NA,8)
mean(x,na,rm = TRUE)
mean(x,na.rm = TRUE)
sum(x,na.rm = TRUE)
d <- data.frame(rost=x,ves=z)
d
d[4,1]
d[3,1]
d[2,]
d[,2]
d$rost
d$ves
my_list <- list(a=7,b=10:20,table=d)
mylist
my_
my_list
install.packages(c("dplyr", "ggplot2", "GGally", "psych"))
install.packages("devtools")
install_github("bdemeshev/sophisthse")
library("devtools")
install_github("bdemeshev/sophisthse")
library("dplyr")
library("ggplot2")
library("GGally")
library("psych")
d <- cars
glimpse(d)
help(cars)
head(d)
tail(d)
describe(d)
d2 <- mutate(d, speed=1.67*speed, dist=0.3*dist, ratio=dist/speed)
glimpse(d2)
qplot(data=d2, dist)
qplot(data=d2, dist, xlab="Длина тормозного пути (м)")
qplot(data=d2, speed, dist)
model <- lm(data=d2, dist~speed)
model
beta_nat <- coef(model)
eps_hat <- residuals(model)
eps_hat
y <- d2$dist
y_hat <- fitted(model)
y_hat
RSS <- deviance(model)
RSS
TSS <- sum((y-mean(y))^2)
TSS
R2 <- ESS/TSS
ESS <- TSS-RSS
R2 <- ESS/TSS
R2
cor(y,y_hat)^2
X <- model.matrix(model)
X
nd <- data.frame(speed=c(40,60))
nd
predict(model, nd)
qplot(data=d2 , speed, dist) + stat_smooth(method = "lm")
library("dplyr")
library("ggplot2")
library("GGally")
library("psych")
t <- swiss
t
describe(t)
help("swiss")
ggpairs(t)
model <- lm(data = t, Fertility~Agriculture+Education+Catholic)
coef(model)
deviance(model)
report <- summary(mode12)
report <- summary(model)
report$r
report$r.squared
cor(t$Fertility,fitted(model))^2
130*0.7
130-91
sleep
help("sleep")
data(sleep)
data
sleep[7,1]
mean(sleep$extra)
max(sleep$extra)
min(sleep$extra)
max(sleep$extra) - min(sleep$extra)
sleep2 <- sleep[5:14,]
sleep
sleep2
var(sleep2$extra)
data(mtcars)
glimpse(mtcars)
ggpairs(mtcars)
model_petrol <- ln(data=mtcars, mpg~cyl+hp+wt+am)
model_petrol <- lm(data=mtcars, mpg~cyl+hp+wt+am)
cor(mtcars$mpg,fitted(model_petrol))^2
model_petrol2 <- lm(data=mtcars, mpg~disp+hp+wt+am)
coef(model_petrol2)
model_petrol3 <- lm(data=mtcars, mpg~disp+cyl+wt+am)
model_petrol4 <- lm(data=mtcars, mpg~disp+hp+cyl+am)
# 1
cor(mtcars$mpg,fitted(model_petrol2))^2
# 2
cor(mtcars$mpg,fitted(model_petrol))^2
# 3
cor(mtcars$mpg,fitted(model_petrol3))^2
# 4
cor(mtcars$mpg,fitted(model_petrol3))^2
round(1.844556 , digits = 1)
## This is a markdown file
add2 <- function(x,y) {
x+y
}
add2(3,5)
above <- function(x,n) {
use <- x>n
x[use]
}
colummean <-function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
}
swirl
swirl::info()
load(swirl)
install.packages("swirl")
load(swirl)
swirl
swirl::main
maim()
main()
install.packages("swirl")
install.packages("swirl")
packageVersion("swirl")
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5!=7
!(5 == 7)
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div = 2)
args(remainder)
submit
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming","is","fun!")
submit
submit()
telegram("Hello!")
submit()
mad_libs("Moscow","mad","...")
submit()
'I'%p%'love'%p%'R!'
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patients".)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
?sample
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram("123")
submit()
submit()
mad_libs(adjective= "good", place="world", noun="man")
submit()
'I'%p%'love'%p%'R!'
library(datasets)
data(iris)
head(iris)
lapply(split(iris,iris$Species), colMeans, na.rm = TRUE)
lapply(split(iris,iris$Species), function(x) colMeans(x[,"Sepal.Length"], na.rm = TRUE))
lapply(split(iris,iris$Species), function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width")], na.rm = TRUE))
round(6.588)
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
round(209.21429-82.63636)
debug(ls)
ls
ls()
swirl()
load(swirl)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply()
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5,
| 5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class
)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
setwd("~/Dropbox/Data_Science/Coursera/Johns_Hopkins/Cource2_RProgramming/Week_3/ProgrammingAssignment2")
